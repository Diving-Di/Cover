<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>butterfly添加搜索功能</title>
      <link href="/2024/12/01/butterfly%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2024/12/01/butterfly%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-butterfly添加主页搜索功能"><a href="#hexo-butterfly添加主页搜索功能" class="headerlink" title="hexo+butterfly添加主页搜索功能"></a>hexo+butterfly添加主页搜索功能</h2><p>虽然我的博客现在还没有什么东西，但是不妨碍我屎盆子镶金边地加上搜索功能。</p><span id="more"></span><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>前往博客的根目录，需要在命令行里输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>使用<code>cnpm</code>是因为我的npm不能正常使用，所以换成了这个<code>npmjs.org</code>镜像。cnpm解决了中国大陆由于网络问题导致的 npm 包下载缓慢的问题，是可以替代官方版本的，个人使用下来还是蛮方便的。如果npm能很好下载就把命令前的cnpm改成npm即可。</p><h4 id="cnpm安装"><a href="#cnpm安装" class="headerlink" title="cnpm安装"></a>cnpm安装</h4><p>这里小小放一下cnpm的安装~</p><h5 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h5><p>这个应该都是安装好的，不放心可以使用<code>node -v</code>检查一下。</p><p><img src="/../images/butterfly%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/image-20241201204011171.png" alt="版本检查"></p><h5 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm -registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h5 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p><img src="/../images/butterfly%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/image-20241201204133140.png" alt="cnpm检查"></p><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><p>也可以通过下面的指令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>即先安装cnpm，再切换到淘宝npm镜像源。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>有时候可能会碰到安装cnpm一直卡住的问题，可能是因为npm版本过低。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><p>执行以上命令更新npm，然后执行<code>npm -v</code>检查版本。</p><hr><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改站点配置文件<code>_config.yml</code>，添加下面的代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># post:文章范围、page:页面范围、all:覆盖所有</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span> <span class="comment"># 内容是否包含每一篇文章的全部内容</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># ./search.xml 指定定制的XML模板</span></span><br></pre></td></tr></table></figure><h3 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h3><p>在主题配置文件<code>_config.butterfly.yml</code>中修改以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="comment"># Choose: algolia_search / local_search / docsearch</span></span><br><span class="line">  <span class="comment"># leave it empty if you don&#x27;t need search</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br><span class="line">  <span class="attr">placeholder:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Algolia Search</span></span><br><span class="line">  <span class="attr">algolia_search:</span></span><br><span class="line">    <span class="comment"># Number of search results per page</span></span><br><span class="line">    <span class="attr">hitsPerPage:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Local Search</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">CDN:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Docsearch</span></span><br><span class="line">  <span class="comment"># https://docsearch.algolia.com/</span></span><br><span class="line">  <span class="attr">docsearch:</span></span><br><span class="line">    <span class="attr">appId:</span></span><br><span class="line">    <span class="attr">apiKey:</span></span><br><span class="line">    <span class="attr">indexName:</span></span><br><span class="line">    <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>因为我使用的是<code>local_search</code>，所以我只需要在<code>use</code>后面加上<code>local_search</code>就好了。当然还有剩下两个配置选项，可能会更好用一点，但我不需要这些，所以没有去配置，具体配置情况可以看<a href="https://www.jianshu.com/p/500e2e1e66c5">Hexo + Butterfly 键入搜索功能 - 简书</a>。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>重新编译运行就能看到最终效果啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这样可以在本地端口看到效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>最后再布置到<strong>GitHub</strong>上就可以了~</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly访问人数设置</title>
      <link href="/2024/11/29/hexo-butterfly%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/11/29/hexo-butterfly%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-butterfly-busuanzi设置"><a href="#hexo-butterfly-busuanzi设置" class="headerlink" title="hexo+butterfly busuanzi设置"></a>hexo+butterfly busuanzi设置</h2><p>其实这在butterfly主题上是一件很简单的事情，因为这个主题已经有很完善的busuanzi统计访问人数的功能了。但是，我还是花了很多时间去做这个东东，虽然最后还是没有完成……</p><p>不过这并不是我的原因……</p><span id="more"></span><h3 id="普通设置"><a href="#普通设置" class="headerlink" title="普通设置"></a>普通设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Busuanzi count for PV / UV in site</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br></pre></td></tr></table></figure><p>其实只需要在<code>_config.butterfly.yml</code>文件中修改上述代码，将<code>false</code>修改为<code>true</code>即可。</p><p>但是，我总是能碰到下面这种情况：</p><p><img src="/../images/hexo-butterfly%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E8%AE%BE%E7%BD%AE/image-20241129211005190.png" alt="image-20241129211005190"></p><p>这是一件很tricky的事情，因为按照上面的简单设置，应该不可能出问题才是。我调试了很久之后终于知道了，这是因为<code>busuanzi</code>这个网站使用人日益增多，导致官方服务愈发缓慢，所以会一直加载不出来。这个转圈圈就是加载不出来的关系，并不是内部代码出现什么问题。而网上又没有什么资料说明这个情况，导致我到处修改了好久。直到昨天晚上我突然发现它能加载出来了，重新搜索了一下才知道是这个原因。</p><h3 id="更换CDN"><a href="#更换CDN" class="headerlink" title="更换CDN"></a>更换CDN</h3><p>其实可以使用CDN来加速访问，详情可见<a href="https://github.com/Pil0tXia/busuanzi-modified">这个界面</a>，里面有对CDN修改的说明，还有对busuanzi的js地址修改的说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">option:</span><br><span class="line">    # abcjs_basic_js:</span><br><span class="line">    # activate_power_mode:</span><br><span class="line">    # algolia_js:</span><br><span class="line">    # algolia_search:</span><br><span class="line">    # aplayer_css:</span><br><span class="line">    # aplayer_js:</span><br><span class="line">    # artalk_css:</span><br><span class="line">    # artalk_js:</span><br><span class="line">    # blueimp_md5:</span><br><span class="line">    busuanzi: https://jsd.onmicrosoft.cn/gh/Pil0tXia/busuanzi-modified/busuanzi.pure.mini.js</span><br></pre></td></tr></table></figure><p>只需要将<code>_config.butterfly.yml</code>这个文件最下面的option选项中注释掉的<code>busuanzi</code>取消注释，然后加上CDN地址即可。（上面的CDN地址我是从上述网站中复制的，但是没用）。</p><p>不过遗憾的是，我自己使用他给的这三个CDN，还是无法显示出我的访问量等等信息，可能这些CDN有点陈旧了。</p><h3 id="自部署busuanzi访问量统计服务"><a href="#自部署busuanzi访问量统计服务" class="headerlink" title="自部署busuanzi访问量统计服务"></a>自部署busuanzi访问量统计服务</h3><p>这相当于是自己建了一个busuanzi网站供自己使用。其实GitHub上早有这样的开源项目，具体可以去访问<a href="https://github.com/soxft/busuanzi">Github开源项目</a>以及这篇<a href="https://blog.liushen.fun/posts/e401be2d/">博客说明</a>。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>不过我感觉搞一个这个属实有点浪费时间，所以最后还是决定删去访问量统计这个功能，毕竟这个功能没有什么特别的用处，我也只是想建一个自己的私密的博客每天看看主页赏心悦目的壁纸（嘿嘿）。</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task1：Hello Move</title>
      <link href="/2024/11/09/task1/"/>
      <url>/2024/11/09/task1/</url>
      
        <content type="html"><![CDATA[<p>这是我参加move共学营的第一个任务。因为正好赶上烤柿粥，所以也是拖了很久才开始做。<br></p><span id="more"></span><h3 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h3><p>根据指令 <code> ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code>，来设置密钥，这主要是方便GitHub仓库可以直接通过<code>ssh</code>连接，而不是每次都要输入密码。</p><p><img src="/../images/task1-hello-move/ssh.png" alt="ssh装配图片" title="ssh装配图片"></p><p>然后运行<code>cat /home/cindy/.ssh/id_rsa.pub</code>来查看公钥，并且复制到GitHub设置中的SSH Keys里面即可。</p><p><img src="/../images/task1-hello-move/ssh2.png" alt="SSH Keys设置" title="SSH Keys设置"></p><p>因为我已经配置过ssh了的，所以这上面显示两个SSH Keys。</p><p>然后前往letsmove的GitHub仓库：<a href="https://github.com/move-cn">https://github.com/move-cn</a></p><p>将整个仓库fork下来之后，使用以下命令clone自己fork的这个仓库到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 你的这个仓库的ssh链接</span><br></pre></td></tr></table></figure><p>出现以下结果就是clone成功了。</p><p><img src="/../images/task1-hello-move/git-clone.png" alt="clone-result" title="git clone的结果"></p><h3 id="SUI钱包"><a href="#SUI钱包" class="headerlink" title="SUI钱包"></a>SUI钱包</h3><p>前往浏览器上的SUI钱包<a href="https://chromewebstore.google.com/detail/sui-wallet/opcgpfmipidbgpenhmajoajpbobppdil">下载链接</a>下载钱包，然后打开钱包进行登录之后，就可以得到自己的钱包地址啦。</p><p><img src="/../images/task1-hello-move/qb.png" alt="SUI钱包创建" title="SUI钱包创建"></p><h3 id="SUI-CLI安装"><a href="#SUI-CLI安装" class="headerlink" title="SUI CLI安装"></a>SUI CLI安装</h3><p>我选择使用Homebrew来安装SUI，所以要先安装Homebrew。</p><p>首先使用以下命令安装Homebrew的相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential procps curl file git</span><br></pre></td></tr></table></figure><p>Homebrew需要有相对较新版本的 gcc 和 glibc，除此之外，还需要 安装Git、Curl 和 procps（用于监控系统进程）。</p><p>然后通过以下命令安装Homebrew：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>接着就可以使用<code>brew install sui</code>安装SUI。</p><p>用brew安装真的要贼久啊，反正我是这样的。安装成功之后，就可以输入<code>sui -V</code>来查看是否安装成功。我这里显示<code>sui 1.37.1-homebrew</code>，显然是已经安装好了。</p><h3 id="编写HelloWorld"><a href="#编写HelloWorld" class="headerlink" title="编写HelloWorld"></a>编写HelloWorld</h3><p>我是用WSL+Vscode的形式的，感觉这样比较好用且方便。</p><p><img src="/../images/task1-hello-move/WSL+vscode.png" alt="wsl连接vscode" title="Ubuntu连接Vscode"></p><p>点击左下角的蓝色小方块，然后在vscode上方的搜索窗口搜索WSL即可连接上Ubuntu。只不过这个配置还需要一些前期工作的，vscode需要先下载拓展WSL等等，感兴趣可以上网查一下。</p><p>接着在vscode里打开前面git clone 的letsmove仓库文件夹即可。然后按照task1的要求复制001这个文件夹，并把名字改成自己的<strong>GitHub id</strong>。</p><p>将文件夹里最外面的readme.txt里面的基本信息和个人简介填好。还有任务中的钱包截图等要放到images文件夹中。同时记得把打勾框勾起来。最简便的方法是在vscode中安装插件<code>Markdown Preview Enhanced</code>，这样就可以一边编辑一边查看了。而且打勾框可以直接在可视化界面点击即可，不需要再在框里面加上<code>x</code>，这样写出来的可能会显示为一个<code>● [x]</code>，虽然我也不知道为什么，可能是编辑器的关系。</p><p>修改完全之后<code>cd code</code>进入code文件夹，执行<code>sui move new task1</code>创建task1文件。然后打开新建文件中的<strong>task1.move</strong>。</p><p><img src="/../images/task1-hello-move/code.png" alt="代码" title="代码展示"></p><p>将string中的Github id改成自己的就行。图中我是下载了move插件的高亮的，看着会舒服很多。不过舒服是<strong>有代价的</strong>，因为这个插件，导致我后面一直报错，所以推荐<strong>不要安装！！！</strong>。报错请看后面——</p><p><img src="/../images/task1-hello-move/bug.png" alt="bug"></p><p>然后我就被这个bug硬控了一个下午。查了两个小时资料还是没有用，甚至我还把<code>/etc/resolv.conf</code>里的IP地址改成了谷歌服务器的地址还是没有用。尝试了一堆方法，甚至找到了一个有同样问题的人的<a href="https://github.com/MystenLabs/sui/issues/16906">讨论区</a>。虽然我翻了这个讨论区好久都没找到解决方法。主要是感觉并不是网络的问题，我可以ping通<a href="github.com">github.com</a>，SSH链接也是正常的，就很奇怪。然后在讨论群里问了一下之后，发现<code>curl google.com</code>这个命令会失败。可能真是网络问题，所以我又去搜了一下，配置了一下代理。</p><p>本来群里的好心人让我用下面命令配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:1080;</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1080;</span><br><span class="line"><span class="built_in">export</span> all_proxy=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>但是我google之后发现这个已经不行了，要用下面这样的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep -oP <span class="string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:1080&quot;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:1080&quot;</span></span><br></pre></td></tr></table></figure><p>后面的端口号要改成自己windows代理上的端口号。还要把<code>/etc/resolv.conf</code>里的IP改回来。</p><p>然后就会变成另外一种报错，如下：</p><p><img src="/../images/task1-hello-move/new-bug.png" alt="new-bug" title="新的bug"></p><p>当然这些都没有什么鸟用……只要把最开始的<strong>高亮插件</strong>卸载即可完美解决。</p><p><img src="/../images/task1-hello-move/scan.png" alt="结果" title="最终结果图"></p><p>这是最终的结果图！</p>]]></content>
      
      
      <categories>
          
          <category> move共学营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> move </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello My First Blog</title>
      <link href="/2024/11/06/hello-world/"/>
      <url>/2024/11/06/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一篇博客！"><a href="#我的第一篇博客！" class="headerlink" title="我的第一篇博客！"></a>我的第一篇博客！</h2><p>偶然之下，我建立了这个自己的网站。虽然到现在才开始修改这个网站的第一篇博客的内容……</p><span id="more"></span><p>直到真正上手之后，我才知道，建一个自己的博客有多么麻烦。我花了好久时间去熟悉整个博客的框架和各种命令，也搜索了大量的网页去布置这个网页的样式。不过，虽然我把整个网站都布置的差不多了，但产能跟不上了——我发现我根本就懒得写东西上去……</p><p>哎哎！我以后一定会多多创作的，肯定只是这段时间太忙了（枯了）。</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
